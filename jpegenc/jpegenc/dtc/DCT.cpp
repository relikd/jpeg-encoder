#include "DCT.hpp"
#include <math.h>

#define N 8

inline float getC(size_t i) {
	if (i == 0)
		return 0.7071067811865475244008443621048490392848359376884740;  //1/sqrt(2)
	return 1;
}

inline float getConstantC(unsigned char x, unsigned char y) { // (2.0F / N) * getC(i) * getC(j)
	if (x != 0 && y != 0)
		// most common clause (49 / 64)
		return 0.25;
	else if (x != 0 || y != 0)
		// second most common clause (14 / 64)
		return 0.176776695296636893184327732342353556305170059204101562;
	else
		// least common clause (1 / 64)
		return 0.125;
}

// float %1.25f  double %1.54f
static const float cos_2x1iPi_2N[8][8] = { // cos( (2x + 1)iÏ€ / 2N )
	{ 1, 0.9807852804032304491261822361342390369739337308933360950031, 0.923879532511286756128183189396788286822416625863642486116, 0.831469612302545237078788377617905756738560811987249963448, 0.707106781186547524400844362104849039284835937688474036591, 0.555570233019602224742830813948532874374937190754804045928, 0.38268343236508977172845998403039886676134456248562704144, 0.19509032201612826784828486847702224092769161775195480776 },
	{ 1, 0.831469612302545237078788377617905756738560811987249963447, 0.38268343236508977172845998403039886676134456248562704144, -0.19509032201612826784828486847702224092769161775195480775, -0.70710678118654752440084436210484903928483593768847403659, -0.980785280403230449126182236134239036973933730893336095002, -0.92387953251128675612818318939678828682241662586364248612, -0.55557023301960222474283081394853287437493719075480404593 },
	{ 1, 0.555570233019602224742830813948532874374937190754804045925, -0.38268343236508977172845998403039886676134456248562704143, -0.980785280403230449126182236134239036973933730893336095003, -0.70710678118654752440084436210484903928483593768847403659, 0.19509032201612826784828486847702224092769161775195480775, 0.92387953251128675612818318939678828682241662586364248611, 0.83146961230254523707878837761790575673856081198724996345 },
	{ 1, 0.195090322016128267848284868477022240927691617751954807755, -0.923879532511286756128183189396788286822416625863642486115, -0.555570233019602224742830813948532874374937190754804045925, 0.707106781186547524400844362104849039284835937688474036587, 0.831469612302545237078788377617905756738560811987249963448, -0.382683432365089771728459984030398866761344562485627041431, -0.980785280403230449126182236134239036973933730893336095004 },
	{ 1, -0.195090322016128267848284868477022240927691617751954807754, -0.923879532511286756128183189396788286822416625863642486115, 0.555570233019602224742830813948532874374937190754804045923, 0.707106781186547524400844362104849039284835937688474036589, -0.831469612302545237078788377617905756738560811987249963445, -0.382683432365089771728459984030398866761344562485627041436, 0.980785280403230449126182236134239036973933730893336095002 },
	{ 1, -0.555570233019602224742830813948532874374937190754804045924, -0.382683432365089771728459984030398866761344562485627041434, 0.980785280403230449126182236134239036973933730893336095003, -0.707106781186547524400844362104849039284835937688474036588, -0.19509032201612826784828486847702224092769161775195480776, 0.923879532511286756128183189396788286822416625863642486116, -0.831469612302545237078788377617905756738560811987249963445 },
	{ 1, -0.831469612302545237078788377617905756738560811987249963446, 0.382683432365089771728459984030398866761344562485627041434, 0.195090322016128267848284868477022240927691617751954807755, -0.707106781186547524400844362104849039284835937688474036589, 0.980785280403230449126182236134239036973933730893336095003, -0.923879532511286756128183189396788286822416625863642486115, 0.55557023301960222474283081394853287437493719075480404592 },
	{ 1, -0.9807852804032304491261822361342390369739337308933360950029, 0.923879532511286756128183189396788286822416625863642486115, -0.831469612302545237078788377617905756738560811987249963446, 0.707106781186547524400844362104849039284835937688474036588, -0.55557023301960222474283081394853287437493719075480404592, 0.38268343236508977172845998403039886676134456248562704143, -0.19509032201612826784828486847702224092769161775195480775 }
};

static const float* matrixA = new float[64] {
	0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273730857504233426880091428756713867187500,
	0.490392640201615215289621119154617190361022949218750000,  0.415734806151272617835701339572551660239696502685546875,  0.277785116509801144335511935423710383474826812744140625,  0.097545161008064151797469776283833198249340057373046875, -0.097545161008064096286318545026006177067756652832031250, -0.277785116509800977802058241650229319930076599121093750, -0.415734806151272673346852570830378681421279907226562500, -0.490392640201615215289621119154617190361022949218750000,
	0.461939766255643369241568052530055865645408630371093750,  0.191341716182544918645191955874906852841377258300781250, -0.191341716182544863134040724617079831659793853759765625, -0.461939766255643369241568052530055865645408630371093750, -0.461939766255643369241568052530055865645408630371093750, -0.191341716182545168445372496535128448158502578735351562,  0.191341716182545001911918802761647384613752365112304688,  0.461939766255643258219265590014401823282241821289062500,
	0.415734806151272617835701339572551660239696502685546875, -0.097545161008064096286318545026006177067756652832031250, -0.490392640201615215289621119154617190361022949218750000, -0.277785116509801088824360704165883362293243408203125000,  0.277785116509800922290907010392402298748493194580078125,  0.490392640201615215289621119154617190361022949218750000,  0.097545161008064387719862509129598038271069526672363281, -0.415734806151272562324550108314724639058113098144531250,
	0.353553390593273786368655464684707112610340118408203125, -0.353553390593273730857504233426880091428756713867187500, -0.353553390593273841879806695942534133791923522949218750,  0.353553390593273730857504233426880091428756713867187500,  0.353553390593273841879806695942534133791923522949218750, -0.353553390593273342279445614622090943157672882080078125, -0.353553390593273619835201770911226049065589904785156250,  0.353553390593273286768294383364263921976089477539062500,
	0.277785116509801144335511935423710383474826812744140625, -0.490392640201615215289621119154617190361022949218750000,  0.097545161008064137919681968469376442953944206237792969,  0.415734806151272784369155033346032723784446716308593750, -0.415734806151272562324550108314724639058113098144531250, -0.097545161008064013019591698139265645295381546020507812,  0.490392640201615326311923581670271232724189758300781250, -0.277785116509800755757453316618921235203742980957031250,
	0.191341716182544918645191955874906852841377258300781250, -0.461939766255643369241568052530055865645408630371093750,  0.461939766255643258219265590014401823282241821289062500, -0.191341716182544918645191955874906852841377258300781250, -0.191341716182545279467674959050782490521669387817382812,  0.461939766255643369241568052530055865645408630371093750, -0.461939766255643147196963127498747780919075012207031250,  0.191341716182544779867313877730339299887418746948242188,
	0.097545161008064151797469776283833198249340057373046875, -0.277785116509801088824360704165883362293243408203125000,  0.415734806151272784369155033346032723784446716308593750, -0.490392640201615326311923581670271232724189758300781250,  0.490392640201615215289621119154617190361022949218750000, -0.415734806151272506813398877056897617876529693603515625,  0.277785116509800755757453316618921235203742980957031250, -0.097545161008064276697560046613943995907902717590332031
};

Mat DCT::transform(Mat input) {
	// As mat has to be quadratic we can just work with the rows
	Mat newMat(input.rows);
	for (int i = 0; i < input.rows; ++i) {
		for (int j = 0; j < input.rows; ++j) {
		
			float outer = 2.0F / input.rows * getC(i) * getC(j);
			float inner = 0;
	
			for (int x = 0; x < input.rows; ++x) {
				for (int y = 0; y < input.rows; ++y) {
					float firstCos = cos(((2 * x + 1) * i * M_PI) / (2.0 * input.rows));
					float secondCos = cos(((2 * y + 1) * j * M_PI) / (2.0 * input.rows));
					inner += input.get(x, y) * firstCos * secondCos;
				}
			}
			newMat.set(i , j , outer * inner);
		}
	}
	
	return newMat;
}

void DCT::transform(float* &input, float* &output, size_t width, size_t height) {
	unsigned char i,j,x,y;
	i = N;
	while (i--) { // outer loop over output
		j = N;
		while (j--) {
			float inner = 0;
			x = N;
			while (x--) { // inner loop over input
				y = N;
				while (y--) {
					inner += input[y + x * N] * cos_2x1iPi_2N[x][i] * cos_2x1iPi_2N[y][j];
				}
			}
			output[j + i * N] = getConstantC(i,j) * inner;
		}
	}
}

Mat DCT::transform2(Mat input) {
	Mat a = generateA(input.rows);
	Mat temp = a * input;
	a.transpose();
	
	return temp * a;
}

void multiplyWithMatrix(float* &a, float* &b, float* &result) {
	unsigned char x,y, i;
	y = N;
	while (y--) {
		x = N;
		while (x--) {
			float sum = 0;
			i = N;
			while (i--) { // multiplication loop
				sum += a[y * N + i] * b[i * N + x];
			}
			result[y * N + x] = sum;
		}
	}
}
// two separate loops because its around 300.000 operations per second faster than a if (bool) clause
void multiplyWithTransposedMatrix(float* &a, float* &b, float* &result) {
	unsigned char x,y, i;
	y = N;
	while (y--) {
		x = N;
		while (x--) {
			float sum = 0;
			i = N;
			while (i--) { // multiplication loop
				sum += a[y * N + i] * b[x * N + i];
			}
			result[y * N + x] = sum;
		}
	}
}

void DCT::transform2(float* &input) {
	float* temp = new float[64];
	multiplyWithMatrix((float*&)matrixA, input, temp); // a * input
	multiplyWithTransposedMatrix(temp, (float*&)matrixA, input); // input^t * a
}

Mat DCT::inverse(Mat input) {
	// As mat has to be quadratic we can just work with the rows
	Mat newMat(input.rows);
	
	for (int x = 0; x < input.rows; ++x) {
		for (int y = 0; y < input.rows; ++y) {
			
			float inner = 0;
			
			for (int i = 0; i < input.rows; ++i) {
				for (int j = 0; j < input.rows; ++j) {
					float prÃ¤fix = 2.0 /input.rows * getC(i) * getC(j) * input.get(i, j);
					float firstCos = cos(((2 * x + 1) * i * M_PI) / (2.0 * input.rows));
					float secondCos = cos(((2 * y + 1) * j * M_PI) / (2.0 * input.rows));
					inner += prÃ¤fix * firstCos * secondCos;
					
				}
			}
			newMat.set(x, y, inner);
		}
	}
	
	return newMat;
}

Mat DCT::generateA(int dimension) {
	Mat mat(dimension);
	
	for (int k = 0; k < dimension; ++k) {
		for (int n = 0; n < dimension; ++n) {
			float value = getC(k) * sqrt(2.0F / dimension) * cos((2 * n + 1) * ((k * M_PI) / (2 * dimension)));
			mat.set(k, n, value);
		}
	}
	
	return mat;
}
